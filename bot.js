const {Telegraf, Markup} = require("telegraf");
const { message } = require('telegraf/filters');
const { inserTgUser, updateTgUserAction, getTgUserAction, authorization, authorizationPassword, registeredUserLogin,
    checkLogin, registeredUserPassword, checkRegisteredUserPassword, unAuthorizationUsers, updateAmountAccount,
    checkUserAmount, checkTarif, checkSelectedTarif, updateAmountWrite
} = require("./database");
require("dotenv").config();
const { BOT_TOKEN } = process.env

const bot = new Telegraf(`${BOT_TOKEN}`)  // –í–∫–∞–∑—É—î–º —Ç–æ–∫–µ–Ω –±–æ—Ç—É

//–ö–õ–ê–í–Ü–ê–¢–£–†–ò
const main_menu = [['üíµ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å', 'üí∞ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å'], ['üí± –°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏', 'üö∂ –í–∏–π—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é']]
const balance_menu = [['üíµ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å', 'üí± –°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏'],['üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é']]
const amount_menu = [['üíµ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å', 'üí∞ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å'],['üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é']]
const auth_menu = [['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è', 'üé´ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'],]
const main_back = [['üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é']]
const registared_back = [['üîô –ù–∞–∑–∞–¥'],]

bot.command('start', async ctx => { // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç—É —Ç–∞ –ø–æ–¥–∞–ª—å—à—ñ –≤–∏–∫–ª–∏–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start
    try {

        const chat_id = ctx?.chat?.id;

        const registered = await inserTgUser(chat_id)

        if(registered){// —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–∞–ø—É—Å–∫–∞–≤ –±–æ—Ç–∞ —Ä–∞–Ω—ñ—à–µ

            if(registered?.auth){ // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
                ctx.replyWithHTML(`–í—ñ—Ç–∞—é ${registered?.login}\n–û–±–µ—Ä—ñ—Ç—å —â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ`,Markup.keyboard(main_menu).resize()
                );
            } else{ // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
                ctx.reply('–í—ñ—Ç–∞—é, –æ–±–µ—Ä—ñ—Ç—å ',Markup.keyboard(auth_menu).resize()
                );
            }

            await updateTgUserAction(chat_id, '')
        } else{
            // —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–ø–µ—Ä—à–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞
            ctx.reply('–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ —Ç—É—Ç –≤–ø–µ—Ä—à–µ...',Markup.keyboard(auth_menu).resize()
            );
            await updateTgUserAction(chat_id, '')
        }

    } catch (e) {
        console.error(e)
    }
});

bot.on(message, async ctx => {
    try {

        const chat_id = ctx?.chat?.id;
        const message = ctx?.message?.text;
        const command = message?.replace(/[\u{1F300}-\u{1F5FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '').trim();
        const action = await getTgUserAction(chat_id)
        const callback = ctx?.update?.callback_query?.data

        switch (true) {
            case (command === '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è'): {  // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
                try {
                    await updateTgUserAction(chat_id, 'authorization_login')
                    ctx.replyWithHTML('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à <b>–õ–æ–≥—ñ–Ω</b>')
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'authorization_login' && command !== '–ù–∞–∑–∞–¥'): { // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω–∞
                try {
                    const auth = await authorization(chat_id, message)
                    if (auth !== undefined && !auth?.activate) {
                        ctx.replyWithHTML(`–í–∞—à –ª–æ–≥—ñ–Ω: <b>${auth?.login}</b>\n–í–≤–µ–¥—ñ—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>`)
                        await updateTgUserAction(chat_id, 'authorization_password')
                    } else if(auth !== undefined && auth?.activate) {
                        ctx.replyWithHTML('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑ —ñ–Ω—à–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç—É, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –º–æ–∂–ª–∏–≤–∞\n–í–∫–∞–∂—ñ—Ç—å —ñ–Ω—à–∏–π –ª–æ–≥—ñ–Ω',Markup.keyboard(registared_back).resize()
                        );
                    } else{
                        ctx.replyWithHTML('–ù–µ–≤—ñ—Ä–Ω–∏–π <b>–ª–æ–≥—ñ–Ω</b>\n–í–∫–∞–∂—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π –ª–æ–≥—ñ–Ω',Markup.keyboard(registared_back).resize()
                        );
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'authorization_password' && command !== '–ù–∞–∑–∞–¥'): { // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—é
                try {
                    const auth_password = await authorizationPassword(chat_id, message)
                    if (auth_password) {
                        ctx.replyWithHTML(`–î–æ–±—Ä–∏–π –¥–µ–Ω—å <b>${auth_password?.login}</b>`,Markup.keyboard(main_menu).resize())
                        await updateTgUserAction(chat_id, '')
                    } else {
                        ctx.replyWithHTML('–ù–µ–≤—ñ—Ä–Ω–∏–π <b>–ø–∞—Ä–æ–ª—å</b>',Markup.keyboard(registared_back).resize()
                        );
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (command === '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'): {  //–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
                try {
                    await updateTgUserAction(chat_id, 'registration')
                    ctx.replyWithHTML('–í–∏–≥–∞–¥–∞–π—Ç–µ –≤–∞—à <b>–õ–æ–≥—ñ–Ω</b>, –≤—ñ–Ω –º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º')
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'registration' && command !== '–ù–∞–∑–∞–¥'): { // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–≤–µ–¥–µ–Ω–Ω—è –ª–æ–≥—ñ–Ω—É
                try {
                    if (message.length >= 4) {
                        const regex = /\s/;
                        if(!regex.test(message)){
                            const confirmLogin = await checkLogin(message)
                            if (!confirmLogin) {
                                await registeredUserLogin(chat_id, message)
                                ctx.replyWithHTML(`–í–∞—à –ª–æ–≥—ñ–Ω: <b>${message}</b>\n\n–í–∏–≥–∞–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å`)
                                await updateTgUserAction(chat_id, 'registration_password')

                            } else {
                                ctx.replyWithHTML(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ª–æ–≥—ñ–Ω–æ–º <b>${message}</b> —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π\n–í–∏–≥–∞–¥–∞–π—Ç–µ —ñ–Ω—à–∏–π –ª–æ–≥—ñ–Ω`)
                            }
                        } else{
                            ctx.replyWithHTML('–õ–æ–≥—ñ–Ω –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤!',Markup.keyboard(registared_back).resize())
                        }

                    } else {
                        ctx.replyWithHTML('–õ–æ–≥—ñ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 4 –∞–±–æ –±—ñ–ª—å—à–µ —Å–∏–º–≤–æ–ª—ñ–≤',Markup.keyboard(registared_back).resize())
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'registration_password' && command !== '–ù–∞–∑–∞–¥'): { //—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
                try {
                    if (message.length >= 6) {
                        const registeredLogin = await registeredUserPassword(chat_id, message)
                        ctx.replyWithHTML(`–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å`)
                        await updateTgUserAction(chat_id, 'registration_password_wait')
                    } else {
                        ctx.replyWithHTML('–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 6 –∞–±–æ –±—ñ–ª—å—à–µ —Å–∏–º–≤–æ–ª—ñ–≤',Markup.keyboard(registared_back).resize())
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'registration_password_wait' && command !== '–ù–∞–∑–∞–¥'): { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—é –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                try {
                    if (message.length >= 6) {
                        const checkUserPassword = await checkRegisteredUserPassword(chat_id, message)
                        if(checkUserPassword){
                            ctx.replyWithHTML(`–í—ñ—Ç–∞—é ${checkUserPassword?.login}\n–û–±–µ—Ä—ñ—Ç—å —â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ`,Markup.keyboard(main_menu).resize()
                            );
                            await updateTgUserAction(chat_id, 'userLogin')
                        } else{
                            ctx.replyWithHTML('–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å',Markup.keyboard(registared_back).resize()
                            );
                        }

                    } else {
                        ctx.replyWithHTML('–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å',Markup.keyboard(registared_back).resize()
                        );
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'registration_password_wait' && command === '–ù–∞–∑–∞–¥'         //–ö–Ω–æ–ø–∫–∞ –ù–ê–ó–ê–î –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                    || action === 'authorization_login' && command === '–ù–∞–∑–∞–¥'
                    || action === 'authorization_password' && command === '–ù–∞–∑–∞–¥'
                    || action === 'registration_password'): {
                try {
                    ctx.reply('–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é ',Markup.keyboard(auth_menu).resize()
                    );
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (command === '–í–∏–π—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é'): { // –í–∏—Ö—ñ–¥ –∑ –∞–∫–∞—É–Ω—Ç—É
                try {
                    const unAuthResult = await unAuthorizationUsers(chat_id)
                    if(unAuthResult){
                        ctx.reply('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é ',Markup.keyboard(auth_menu).resize()
                        );
                        await updateTgUserAction(chat_id, '')
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }case (command === '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é'): { //–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
                try {
                    ctx.replyWithHTML(`–û–±–µ—Ä—ñ—Ç—å —â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ`,Markup.keyboard(main_menu).resize()
                    );
                    await updateTgUserAction(chat_id, '')

                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (command === '–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å'): { // –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
                try {
                    ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', Markup.keyboard(main_back).resize());
                    await updateTgUserAction(chat_id, 'accountEnroll')

                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (command === '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å'): { // –ü–µ—Ä–µ–≥–ª—è–¥ –±–∞–ª–∞–Ω—Å—É
                try {
                    const userAmount = await checkUserAmount(chat_id)
                    ctx.reply(`–ù–∞—Ä–∞–∑—ñ –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞—î ${userAmount}‚Ç¥`, Markup.keyboard(balance_menu).resize());
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (command === '–°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏'): { // –°–ø–∏—Å–∞–Ω–Ω—è –∑ –±–∞–ª–∞–Ω—Å—É
                try {
                    const userAmount = await checkUserAmount(chat_id)
                    const tarif = await checkTarif()
                    if(tarif){
                        ctx.reply(`–ù–∞ –≤–∞—à–æ–º—É –±–∞–ª–∞–Ω—Å—ñ ${userAmount}‚Ç¥!\n–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ, –Ω–∞ —è–∫–æ–º—É –≤–∏ —Å–∏–¥—ñ–ª–∏:`, Markup.inlineKeyboard(tarif).resize());
                        await updateTgUserAction(chat_id, 'write-offs-tarif')
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'write-offs-tarif'): { //  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É, –≤–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∞—Ä–∏—Ñ
                try {
                    const tarif = await checkSelectedTarif(callback,chat_id)
                    if(tarif){
                        ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ –∑–æ–Ω—É ${tarif?.title} ${tarif?.price} –≥—Ä–Ω/–≥–æ–¥ (${tarif?.price_minut} –≥—Ä–Ω/—Ö–≤)!\n–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω, —Å–∫—ñ–ª—å–∫–∏ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—è –ø–æ—Å–ª—É–≥–æ—é –∫–ª—É–±—É`, Markup.keyboard(amount_menu).resize());
                        await updateTgUserAction(chat_id, 'write-offs')
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'write-offs'): { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å–ø–∏—Å–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É
                try {
                    if(callback){
                        const tarif = await checkSelectedTarif(callback,chat_id)
                        if(tarif){
                            ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ –∑–æ–Ω—É ${tarif?.title} ${tarif?.price} –≥—Ä–Ω/–≥–æ–¥ (${tarif?.price_minut} –≥—Ä–Ω/—Ö–≤)!\n–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω, —Å–∫—ñ–ª—å–∫–∏ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—è –ø–æ—Å–ª—É–≥–æ—é –∫–ª—É–±—É`, Markup.keyboard(amount_menu).resize());
                            await updateTgUserAction(chat_id, 'write-offs')
                        }
                    } else{
                        const numberRegExp = /^-?\d*\.?\d+$/;
                        if(numberRegExp.test(message)){
                            const amountWrite = await updateAmountWrite(chat_id,message)
                            if(amountWrite) {
                                ctx.reply(`–£ –≤–∞—Å –∑ –±–∞–ª–∞–Ω—Å—É —Å–ø–∏—Å–∞–Ω–æ ${amountWrite}‚Ç¥ !`, Markup.keyboard(amount_menu).resize());
                            } else{
                                ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–∞—Ä–∏—Ñ –∞–±–æ –≤–∏–ø—Ä–∞–≤—Ç–µ —á–∞—Å!`, Markup.keyboard(amount_menu).resize());
                            }
                        } else{
                            ctx.reply(`–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 60`,Markup.keyboard(amount_menu).resize());
                        }
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            case (action === 'accountEnroll'): { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ –≤–≤–µ–¥–µ–Ω—É —Å—É–º—É
                try {
                    const numberRegExp = /^-?\d*\.?\d+$/;
                    if(numberRegExp.test(message)){
                        const updateAmount = await updateAmountAccount(chat_id,message)
                        if(updateAmount) {
                            ctx.reply(`–í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ ${message}‚Ç¥ `, Markup.keyboard(main_back).resize()
                            );
                        }
                    } else{
                        ctx.reply(`–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200.50 `,Markup.keyboard(main_back).resize()
                        );
                    }
                    break;
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
            default: {  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞, —è–∫—â–æ –Ω–µ –±—É–ª–æ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É
                try {
                    ctx.replyWithHTML('<b>–í–∏–±–∞—á—Ç–µ</b>, —è –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é')
                } catch (e) {
                    console.error(e)
                    break;
                }
            }
        }
    } catch (e) {
        console.error(e)
    }
})

module.exports = bot